{"version":3,"sources":["ui/App.module.css","ui/elements/LoadingIndicator.module.css","ui/annotation/Annotation.module.css","http/http.exception.ts","logger/logger.ts","http/http.client.ts","typings/enums.ts","browser-storage/browser-storage.ts","store/user/user.subscriptions.ts","store/annotation/annotation.slice.ts","store/user/user.slice.ts","judgements/judgements.service.ts","store/annotation/annotation.subscriptions.ts","store/middleware/logger.ts","store/store.ts","auth/auth.service.ts","ui/elements/FloatingTextInput.tsx","ui/elements/LoadingIndicator.tsx","ui/elements/Button.tsx","ui/Login.tsx","admin/admin.service.ts","ui/admin/Admin.tsx","util/functions.ts","ui/annotation/Annotation.tsx","ui/PrivateRoute.tsx","ui/App.tsx","util/types.util.ts","serviceWorker.ts","boot/load-stored-user.ts","boot/boot.ts","index.tsx","ui/elements/FloatingTextInput.module.css","ui/Login.module.css","ui/elements/Button.module.css"],"names":["module","exports","HttpException","errorText","status","message","this","Error","createLogger","context","logWithContext","logFn","optionalParams","debug","console","info","error","dir","group","groupEnd","axiosClient","axios","create","timeout","logger","httpClient","loginRequest","a","async","username","post","data","response","refreshRequest","attempt","lastError","accessToken","headers","authorization","judgementId","submitJudgementRequest","put","get","ms","Promise","res","setTimeout","RelevanceLevel","browserStorage","user","localStorage","setItem","JSON","stringify","removeItem","storedUser","getItem","currentlyStoredUser","parse","JudgementPairStatus","RateLevels","text","relevanceLevel","MISLEADING_ANSWER","annotationRequired","buttonColor","NOT_RELEVANT","TOPIC_RELEVANT_DOES_NOT_ANSWER","GOOD_ANSWER","PERFECT_ANSWER","preloadJudgements","createAction","rateJudgementPair","selectRangeStartEnd","deleteRange","setJudgementStatus","selectJudgementPair","reducer","createReducer","judgementPairs","builder","addCase","state","action","alreadyFinished","payload","remainingToFinish","judgementPairsReceived","judgements","map","judgement","jp1","jp2","localEquivalentPair","find","pair","id","queryText","docAnnotationParts","length","some","part","index","annotatedRanges","TO_JUDGE","currentJudgementPair","currentJudgementPairId","rateLevel","undefined","currentAnnotationStart","annotationPartIndex","start","end","actualStart","actualEnd","push","filter","range","currentJudgementPairSelectedOnMs","Date","getTime","UserRole","actions","judgementsService","store","getState","val","dispatch","annotationActions","annotationState","annotation","relevancePositions","annotatedRange","i","now","durationUsedToJudgeMs","SEND_PENDING","SEND_FAILED","SEND_SUCCESS","authenticate","logout","accessTokenJwtPayload","jwt","refreshTokenJwtPayload","refreshToken","isAdmin","resource_access","roles","role","expiry","exp","ADMIN","ANNOTATOR","addMemoizedSubscription","subscription","memoizedValue","memoizeOnValue","subscribe","newValueOfStore","listener","loggerMiddleware","next","type","result","rootReducer","combineReducers","userReducer","annotationReducer","configureStore","middleware","getDefaultMiddleware","scheduleId","REFRESH_OFFSET","moment","duration","currentUser","userOfStore","previousUser","clearTimeout","timeStampToRefresh","unix","subtract","timeUntilRefreshMs","diff","asMilliseconds","authService","refresh","toString","subscribedStore","nextPair","forEach","login","password","loginResponse","userActions","refreshResponse","accessTokenExpired","isBefore","FloatingLabelInput","children","props","className","styles","floatingLabelInput","FloatingLabelInputContainer","floatingLabelInputContainer","FloatingLabel","active","floatingLabelActive","floatingLabel","FloatingInput","inputRef","ref","onBlur","floatingInputActive","floatingInput","FloatingTextInput","label","value","otherProps","useState","setActive","useRef","onClick","current","focus","htmlFor","event","target","onFocus","LoadingIndicator","ldsEllipsis","Button","componentRef","buttonStyle","animate","setAnimate","e","onTransitionEnd","button","styleNormal","styleBold","TextInput","useField","field","meta","showError","touched","inputField","inputFieldError","name","Login","useSelector","to","container","inputArea","initialValues","loginError","validate","values","errors","onSubmit","setSubmitting","setErrors","getStatus","test","code","isSubmitting","autoComplete","errorList","disabled","adminService","exportJudgements","saveTsv","filename","blob","Blob","elem","window","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","Admin","noop","Annotation","useDispatch","tooltipAnnotatePartIndex","setTooltipAnnotatePartIndex","button1Ref","button2Ref","button3Ref","button4Ref","button5Ref","digitRefMap","Digit1","Digit2","Digit3","Digit4","Digit5","rateButtonRefMap","useLayoutEffect","keyUpHandler","key","addEventListener","passive","removeEventListener","pairsSuccessfullySent","progressBarWidth","createShowTooltipFn","currentRateLevel","rateLevelAllowsAnnotation","hasToAnnotate","Math","max","documentElement","clientWidth","innerWidth","style","width","progressBar","onClickCapture","annotationArea","annotationPart","textToShow","replace","currentRangeStartStyle","rangeStart","isInSelectedRange","canAnnotatePart","annotationGridStyle","gridStyle","annotatePartSpan","annotatePart","isInRange","Manager","Reference","Popper","placement","data-placement","annotatePartTooltipButton","xmlns","height","viewBox","fill","d","buttonContainer","rateButton","background","PrivateRoute","requiredRole","rest","RouteToPage","x","assertUnreachable","App","app","exact","path","Boolean","location","hostname","match","bootScripts","bootScript","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a65beca6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__16eIj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsEllipsis\":\"LoadingIndicator_ldsEllipsis__1NuRE\",\"lds-ellipsis1\":\"LoadingIndicator_lds-ellipsis1__3Vee3\",\"lds-ellipsis2\":\"LoadingIndicator_lds-ellipsis2__1xuwq\",\"lds-ellipsis3\":\"LoadingIndicator_lds-ellipsis3__14o4E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progressBar\":\"Annotation_progressBar__3Zl_I\",\"container\":\"Annotation_container__uXhm7\",\"queryText\":\"Annotation_queryText__3rHCG\",\"annotationArea\":\"Annotation_annotationArea__2Ta-7\",\"annotatePart\":\"Annotation_annotatePart__1xChs\",\"annotatePartTooltipButton\":\"Annotation_annotatePartTooltipButton__2vavl\",\"gridStyle\":\"Annotation_gridStyle__3oqxr\",\"isInRange\":\"Annotation_isInRange__3cZIU\",\"rangeStart\":\"Annotation_rangeStart__2a6Nz\",\"buttonContainer\":\"Annotation_buttonContainer__3MDzj\",\"rateButton\":\"Annotation_rateButton__M9e2X\"};","import { HttpStatus } from './http-status.enum';\n\nexport class HttpException extends Error {\n  private errorText: string;\n  private status: HttpStatus;\n  /**\n   * Instantiate a plain HTTP Exception.\n   *\n   * @example\n   * `throw new HttpException()`\n   *\n   * @param errorText string describing the error condition.\n   * @param status HTTP response status code\n   */\n  constructor(errorText: string, status: HttpStatus) {\n    super();\n    this.errorText = errorText;\n    this.status = status;\n    this.message = errorText;\n  }\n  getResponse() {\n    return this.errorText;\n  }\n  getStatus() {\n    return this.status;\n  }\n  toString() {\n    return `HttpException: status=${this.status}, errorText='${this.errorText}'`;\n  }\n}\n","/* eslint-disable no-console */\r\n/* tslint:disable no-console */\r\n\r\nexport const createLogger = (context: string) => {\r\n  const logWithContext = (logFn: (message?: any, ...optionalParams: any[]) => void) => (\r\n    message?: any,\r\n    ...optionalParams: any[]\r\n  ) => logFn(`[${context}] ${message}`, ...optionalParams);\r\n\r\n  return {\r\n    debug: logWithContext(console.debug),\r\n    info: logWithContext(console.info),\r\n    error: logWithContext(console.error),\r\n    dir: logWithContext(console.dir),\r\n    group: console.group,\r\n    groupEnd: console.groupEnd,\r\n  };\r\n};\r\n","import axios from 'axios';\r\n\r\nimport { HttpException } from './http.exception';\r\nimport { createLogger } from '../logger/logger';\r\n\r\nimport {\r\n  LoginRequest,\r\n  ImportUsersResponse,\r\n  ImportUsersRequest,\r\n  AuthResponse,\r\n  RefreshRequest,\r\n  ImportDocumentsReq,\r\n  ImportDocumentsResp,\r\n  ImportQueriesReq,\r\n  ImportQueriesResp,\r\n  ImportJudgementPairsReq,\r\n  ImportJudgementPairsResp,\r\n  PreloadJudgementResponse,\r\n  SaveJudgement,\r\n} from '../typings/typings';\r\n\r\nconst axiosClient = axios.create({\r\n  timeout: 5000,\r\n});\r\nconst logger = createLogger('http.client');\r\nconst REFRESH_RETRY_COUNT = 5;\r\nconst REFRESH_RETRY_DELAY = 3 * 1000; // 3 seconds\r\n\r\nexport const httpClient = {\r\n  login: async (loginRequest: LoginRequest): Promise<AuthResponse> => {\r\n    logger.info('executing login...', { username: loginRequest.username });\r\n\r\n    try {\r\n      return (await axiosClient.post<AuthResponse>('auth/v1/login', loginRequest)).data;\r\n    } catch (e) {\r\n      logger.error('login failed!', e);\r\n      if (e.response?.status === 401) {\r\n        throw new HttpException('credentials invalid', 401);\r\n      }\r\n      throw e;\r\n    }\r\n  },\r\n\r\n  refresh: async (refreshRequest: RefreshRequest): Promise<AuthResponse> => {\r\n    logger.info('executing refresh...', { refreshRequest });\r\n\r\n    // retry refresh with same token 3 times because if the internet connection was idle,\r\n    // ERR_NETWORK_IO_SUSPENDED can occur on the first try\r\n    let attempt = 1;\r\n    let lastError;\r\n    while (attempt <= REFRESH_RETRY_COUNT) {\r\n      try {\r\n        return (await axiosClient.post<AuthResponse>('auth/v1/refresh', refreshRequest)).data;\r\n      } catch (e) {\r\n        logger.info(`refresh failed for attempt=${attempt}`, { error: e });\r\n        lastError = e;\r\n        attempt++;\r\n        if (e.response?.status) {\r\n          // got some response from backend --> no retry necessary\r\n          break;\r\n        }\r\n        if (attempt <= REFRESH_RETRY_COUNT) {\r\n          await timeout(REFRESH_RETRY_DELAY);\r\n        }\r\n      }\r\n    }\r\n    logger.error('refresh failed!', lastError);\r\n    throw lastError;\r\n  },\r\n\r\n  importUsers: async (\r\n    accessToken: string,\r\n    importUsersRequest: ImportUsersRequest,\r\n  ): Promise<ImportUsersResponse> => {\r\n    logger.info('executing import users...', { importUsersRequest });\r\n\r\n    try {\r\n      return (\r\n        await axiosClient.post<ImportUsersResponse>('admin/v1/import/users', importUsersRequest, {\r\n          headers: {\r\n            authorization: `Bearer ${accessToken}`,\r\n          },\r\n        })\r\n      ).data;\r\n    } catch (e) {\r\n      logger.error('import users failed!', e);\r\n      throw e;\r\n    }\r\n  },\r\n\r\n  importDocuments: async (\r\n    accessToken: string,\r\n    importDocumentsRequest: ImportDocumentsReq,\r\n  ): Promise<ImportDocumentsResp> => {\r\n    logger.info('executing import documents...', { importDocumentsRequest });\r\n\r\n    try {\r\n      return (\r\n        await axiosClient.put<ImportDocumentsResp>(\r\n          'admin/v1/import/documents',\r\n          importDocumentsRequest,\r\n          {\r\n            headers: {\r\n              authorization: `Bearer ${accessToken}`,\r\n            },\r\n          },\r\n        )\r\n      ).data;\r\n    } catch (e) {\r\n      logger.error('import documents failed!', e);\r\n      throw e;\r\n    }\r\n  },\r\n\r\n  importQueries: async (\r\n    accessToken: string,\r\n    importQueriesRequest: ImportQueriesReq,\r\n  ): Promise<ImportQueriesResp> => {\r\n    logger.info('executing import queries...', { importQueriesRequest });\r\n\r\n    try {\r\n      return (\r\n        await axiosClient.put<ImportQueriesResp>('admin/v1/import/queries', importQueriesRequest, {\r\n          headers: {\r\n            authorization: `Bearer ${accessToken}`,\r\n          },\r\n        })\r\n      ).data;\r\n    } catch (e) {\r\n      logger.error('import queries failed!', e);\r\n      throw e;\r\n    }\r\n  },\r\n\r\n  importJudgementPairs: async (\r\n    accessToken: string,\r\n    importJudgPairsRequest: ImportJudgementPairsReq,\r\n  ): Promise<ImportJudgementPairsResp> => {\r\n    logger.info('executing import judgement pairs...', { importJudgPairsRequest });\r\n\r\n    try {\r\n      return (\r\n        await axiosClient.put<ImportJudgementPairsResp>(\r\n          'admin/v1/import/judgement-pairs',\r\n          importJudgPairsRequest,\r\n          {\r\n            headers: {\r\n              authorization: `Bearer ${accessToken}`,\r\n            },\r\n          },\r\n        )\r\n      ).data;\r\n    } catch (e) {\r\n      logger.error('import judgement pairs failed!', e);\r\n      throw e;\r\n    }\r\n  },\r\n\r\n  preloadJudgements: async (accessToken: string): Promise<PreloadJudgementResponse> => {\r\n    logger.info('executing preload judgements...');\r\n\r\n    try {\r\n      return (\r\n        await axiosClient.post<PreloadJudgementResponse>('judgements/v1/preload', null, {\r\n          headers: {\r\n            authorization: `Bearer ${accessToken}`,\r\n          },\r\n        })\r\n      ).data;\r\n    } catch (e) {\r\n      logger.error('preload judgements failed!', e);\r\n      throw e;\r\n    }\r\n  },\r\n\r\n  submitJudgement: async (\r\n    accessToken: string,\r\n    judgementId: number,\r\n    submitJudgementRequest: SaveJudgement,\r\n  ): Promise<void> => {\r\n    logger.info('executing submit judgement...', { submitJudgementRequest });\r\n\r\n    try {\r\n      return (\r\n        await axiosClient.put(`judgements/v1/${judgementId}`, submitJudgementRequest, {\r\n          headers: {\r\n            authorization: `Bearer ${accessToken}`,\r\n          },\r\n        })\r\n      ).data;\r\n    } catch (e) {\r\n      logger.error('submit judgement failed!', e);\r\n      throw e;\r\n    }\r\n  },\r\n\r\n  exportJudgements: async (accessToken: string): Promise<string> => {\r\n    logger.info('executing export of judgements...');\r\n\r\n    try {\r\n      return (\r\n        await axiosClient.get(`admin/v1/judgements/export/tsv`, {\r\n          headers: {\r\n            authorization: `Bearer ${accessToken}`,\r\n          },\r\n        })\r\n      ).data;\r\n    } catch (e) {\r\n      logger.error('export of judgements failed!', e);\r\n      throw e;\r\n    }\r\n  },\r\n};\r\n\r\nfunction timeout(ms: number) {\r\n  return new Promise(res => setTimeout(res, ms));\r\n}\r\n","export enum RelevanceLevel {\r\n  NOT_RELEVANT = '0_NOT_RELEVANT',\r\n  TOPIC_RELEVANT_DOES_NOT_ANSWER = '1_TOPIC_RELEVANT_DOES_NOT_ANSWER',\r\n  GOOD_ANSWER = '2_GOOD_ANSWER',\r\n  PERFECT_ANSWER = '3_PERFECT_ANSWER',\r\n  MISLEADING_ANSWER = '-1_MISLEADING_ANSWER',\r\n}\r\n\r\nexport const RateLevels = [\r\n  {\r\n    text: 'Misleading Answer',\r\n    relevanceLevel: RelevanceLevel.MISLEADING_ANSWER,\r\n    annotationRequired: false,\r\n    buttonColor: '#FF7E61',\r\n  },\r\n  {\r\n    text: 'Not Relevant',\r\n    relevanceLevel: RelevanceLevel.NOT_RELEVANT,\r\n    annotationRequired: false,\r\n    buttonColor: '#EBB25B',\r\n  },\r\n  {\r\n    text: 'Topic Relevant, But Does Not Answer',\r\n    relevanceLevel: RelevanceLevel.TOPIC_RELEVANT_DOES_NOT_ANSWER,\r\n    annotationRequired: true,\r\n    buttonColor: '#FFF498',\r\n  },\r\n  {\r\n    text: 'Good Answer',\r\n    relevanceLevel: RelevanceLevel.GOOD_ANSWER,\r\n    annotationRequired: true,\r\n    buttonColor: '#A1E880',\r\n  },\r\n  {\r\n    text: 'Perfect Answer',\r\n    relevanceLevel: RelevanceLevel.PERFECT_ANSWER,\r\n    annotationRequired: true,\r\n    buttonColor: '#73FFC3',\r\n  },\r\n] as const;\r\n","import { createLogger } from '../logger/logger';\r\n\r\ntype LocalStorageUser = {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n};\r\n\r\nconst logger = createLogger('browser-storage');\r\nconst USER_KEY = 'user';\r\n\r\nexport const browserStorage = {\r\n  saveUser: (user: LocalStorageUser) => {\r\n    logger.info('saveUser called', { user });\r\n\r\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\r\n  },\r\n\r\n  clearUser: () => {\r\n    logger.info('clearUser called');\r\n\r\n    localStorage.removeItem(USER_KEY);\r\n  },\r\n\r\n  getUser: (): LocalStorageUser | null => {\r\n    logger.info('getUser called');\r\n\r\n    const storedUser = localStorage.getItem(USER_KEY);\r\n    if (!storedUser) {\r\n      logger.info('no user found');\r\n      return null;\r\n    }\r\n    logger.info('user found', { currentlyStoredUser: storedUser });\r\n    return JSON.parse(storedUser) as LocalStorageUser;\r\n  },\r\n};\r\n","import moment from 'moment';\r\n\r\nimport { browserStorage } from '../../browser-storage/browser-storage';\r\nimport { authService } from '../../auth/auth.service';\r\nimport { createLogger } from '../../logger/logger';\r\nimport { RootStore } from '../store';\r\n\r\nconst logger = createLogger('user.subscriptions');\r\n\r\nexport const setupSubscriptions = (store: RootStore) => {\r\n  // listen for changes on user state and synchronize with browser storage\r\n  const REFRESH_OFFSET = moment.duration(1, 'minutes');\r\n  let currentUser = store.getState().user;\r\n  let scheduleId: NodeJS.Timeout;\r\n\r\n  store.subscribe(() => {\r\n    const userOfStore = store.getState().user;\r\n    if (userOfStore !== currentUser) {\r\n      logger.info('user changed', { previousUser: currentUser, userOfStore });\r\n\r\n      currentUser = userOfStore;\r\n\r\n      if (!currentUser) {\r\n        // if no user is present (e.g., logout was executed), clear scheduled refresh and browser storage\r\n        logger.info('no user present, clear scheduled refresh and browser storage');\r\n        clearTimeout(scheduleId);\r\n        return browserStorage.clearUser();\r\n      }\r\n\r\n      // save new user in browser storage\r\n      browserStorage.saveUser({\r\n        accessToken: currentUser.accessToken.val,\r\n        refreshToken: currentUser.refreshToken.val,\r\n      });\r\n      logger.info('user saved to browser storage');\r\n\r\n      // schedule refresh of token\r\n      const expiry = moment.unix(currentUser.accessToken.expiry);\r\n      const timeStampToRefresh = expiry.subtract(REFRESH_OFFSET);\r\n      const timeUntilRefreshMs = moment\r\n        .duration(timeStampToRefresh.diff(moment()))\r\n        .asMilliseconds();\r\n      const refreshToken = currentUser.refreshToken.val;\r\n\r\n      scheduleId = setTimeout(async () => {\r\n        await authService.refresh(refreshToken);\r\n      }, timeUntilRefreshMs);\r\n\r\n      logger.info(`refresh got scheduled, scheduled at: ${timeStampToRefresh.toString()}`);\r\n    }\r\n  });\r\n};\r\n","import { createAction, createReducer } from '@reduxjs/toolkit';\r\nimport { PreloadJudgement } from '../../typings/typings';\r\nimport { RelevanceLevel, RateLevels } from '../../typings/enums';\r\n\r\nexport enum JudgementPairStatus {\r\n  TO_JUDGE = 'TO_JUDGE',\r\n  SEND_PENDING = 'SEND_PENDING',\r\n  SEND_SUCCESS = 'SEND_SUCCESS',\r\n  SEND_FAILED = 'SEND_FAILED',\r\n}\r\n\r\ntype JudgementPair = PreloadJudgement & {\r\n  readonly relevanceLevel?: RelevanceLevel;\r\n  readonly currentAnnotationStart?: number;\r\n  readonly annotatedRanges: Array<{ start: number; end: number }>;\r\n  readonly status: JudgementPairStatus;\r\n};\r\n\r\ntype AnnotationState = {\r\n  readonly judgementPairs: JudgementPair[];\r\n  readonly alreadyFinished?: number;\r\n  readonly remainingToFinish?: number;\r\n  readonly currentJudgementPairId?: PreloadJudgement['id'];\r\n  readonly currentJudgementPairSelectedOnMs?: number; // unix timestamp\r\n};\r\n\r\ntype PreloadJudgementsPayload = {\r\n  readonly judgements: PreloadJudgement[];\r\n  readonly alreadyFinished: number;\r\n  readonly remainingToFinish: number;\r\n};\r\n\r\ntype RateJudgementPairPayload = {\r\n  readonly relevanceLevel: RelevanceLevel;\r\n};\r\n\r\ntype SelectRangeStartEndPayload = {\r\n  readonly annotationPartIndex: number;\r\n};\r\n\r\ntype DeleteRangePayload = {\r\n  readonly annotationPartIndex: number;\r\n};\r\n\r\ntype SetJudgementStatusPayload = {\r\n  readonly id: PreloadJudgement['id'];\r\n  readonly status: JudgementPairStatus;\r\n};\r\n\r\nconst INITIAL_STATE = { judgementPairs: [] } as AnnotationState;\r\n\r\nconst preloadJudgements = createAction<PreloadJudgementsPayload>('JUDGEMENTS_PRELOADED');\r\nconst rateJudgementPair = createAction<RateJudgementPairPayload>('JUDGEMENT_PAIR_RATED');\r\nconst selectRangeStartEnd = createAction<SelectRangeStartEndPayload>('RANGE_STARTOREND_SELECTED');\r\nconst deleteRange = createAction<DeleteRangePayload>('RANGE_DELETED');\r\nconst setJudgementStatus = createAction<SetJudgementStatusPayload>('JUDGEMENT_STATUS_SET');\r\nconst selectJudgementPair = createAction<JudgementPair | undefined>('JUDGEMENT_PAIR_SELECTED');\r\n\r\nconst reducer = createReducer(INITIAL_STATE, builder =>\r\n  builder\r\n    .addCase(preloadJudgements, (state, action) => {\r\n      state.alreadyFinished = action.payload.alreadyFinished;\r\n      state.remainingToFinish = action.payload.remainingToFinish;\r\n\r\n      const judgementPairsReceived = action.payload.judgements;\r\n\r\n      state.judgementPairs = judgementPairsReceived.map(judgement => {\r\n        const localEquivalentPair = state.judgementPairs.find(pair => pair.id === judgement.id);\r\n        if (localEquivalentPair && areJudgementPairsEqual(localEquivalentPair, judgement)) {\r\n          // keep local data of judgement pair\r\n          return {\r\n            ...judgement,\r\n            ...localEquivalentPair,\r\n          };\r\n        } else {\r\n          // either there is no local data for this judgement pair received from server, or\r\n          // the data of the pair changed significantly\r\n          // --> do not keep local data for this pair\r\n          return {\r\n            ...judgement,\r\n            annotatedRanges: [],\r\n            status: JudgementPairStatus.TO_JUDGE,\r\n          };\r\n        }\r\n      });\r\n    })\r\n    .addCase(rateJudgementPair, (state, action) => {\r\n      const currentJudgementPair = state.judgementPairs.find(\r\n        pair => pair.id === state.currentJudgementPairId,\r\n      );\r\n      currentJudgementPair!.relevanceLevel = action.payload.relevanceLevel;\r\n      const currentRateLevel = RateLevels.find(\r\n        rateLevel => rateLevel.relevanceLevel === currentJudgementPair!.relevanceLevel,\r\n      );\r\n\r\n      // clear annotated ranges if rating is changed to a level which\r\n      // does not require annotation of ranges\r\n      if (!currentRateLevel!.annotationRequired) {\r\n        currentJudgementPair!.annotatedRanges = [];\r\n      }\r\n    })\r\n    .addCase(selectRangeStartEnd, (state, action) => {\r\n      const currentJudgementPair = state.judgementPairs.find(\r\n        pair => pair.id === state.currentJudgementPairId,\r\n      );\r\n      if (currentJudgementPair!.currentAnnotationStart === undefined) {\r\n        currentJudgementPair!.currentAnnotationStart = action.payload.annotationPartIndex;\r\n      } else {\r\n        const start = currentJudgementPair!.currentAnnotationStart;\r\n        const end = action.payload.annotationPartIndex;\r\n        const actualStart = start < end ? start : end;\r\n        const actualEnd = end > start ? end : start;\r\n\r\n        currentJudgementPair!.annotatedRanges.push({\r\n          start: actualStart,\r\n          end: actualEnd,\r\n        });\r\n        currentJudgementPair!.currentAnnotationStart = undefined;\r\n      }\r\n    })\r\n    .addCase(deleteRange, (state, action) => {\r\n      const currentJudgementPair = state.judgementPairs.find(\r\n        pair => pair.id === state.currentJudgementPairId,\r\n      );\r\n      currentJudgementPair!.annotatedRanges = currentJudgementPair!.annotatedRanges.filter(\r\n        range => {\r\n          return !(\r\n            action.payload.annotationPartIndex >= range.start &&\r\n            action.payload.annotationPartIndex <= range.end\r\n          );\r\n        },\r\n      );\r\n    })\r\n    .addCase(setJudgementStatus, (state, action) => {\r\n      const judgementPair = state.judgementPairs.find(pair => pair.id === action.payload.id);\r\n      judgementPair!.status = action.payload.status;\r\n    })\r\n    .addCase(selectJudgementPair, (state, action) => {\r\n      if (state.currentJudgementPairId !== action.payload?.id) {\r\n        state.currentJudgementPairId = action.payload?.id;\r\n        state.currentJudgementPairSelectedOnMs = new Date().getTime();\r\n      }\r\n    }),\r\n);\r\n\r\nfunction areJudgementPairsEqual(jp1: PreloadJudgement, jp2: PreloadJudgement) {\r\n  return (\r\n    jp1.queryText === jp2.queryText &&\r\n    jp1.docAnnotationParts.length === jp2.docAnnotationParts.length &&\r\n    !jp1.docAnnotationParts.some((part, index) => jp2.docAnnotationParts[index] !== part)\r\n  );\r\n}\r\n\r\nexport const actions = {\r\n  preloadJudgements,\r\n  rateJudgementPair,\r\n  selectRangeStartEnd,\r\n  deleteRange,\r\n  setJudgementStatus,\r\n  selectJudgementPair,\r\n};\r\nexport default reducer;\r\n","import { createAction, createReducer } from '@reduxjs/toolkit';\r\nimport * as jwt from 'jsonwebtoken';\r\n\r\nimport { JwtPayload } from '../../typings/typings';\r\n\r\ntype UserState = null | {\r\n  readonly accessToken: {\r\n    readonly val: string;\r\n    readonly expiry: number; // unix timestamp\r\n  };\r\n  readonly refreshToken: {\r\n    readonly val: string;\r\n    readonly expiry: number; // unix timestamp\r\n  };\r\n  readonly role: UserRole;\r\n};\r\n\r\nexport enum UserRole {\r\n  ANNOTATOR = 'ANNOTATOR',\r\n  ADMIN = 'ADMIN',\r\n}\r\n\r\ntype AuthenticatePayload = {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n};\r\n\r\nconst INITIAL_STATE = null as UserState;\r\n\r\nconst authenticate = createAction<AuthenticatePayload>('AUTHENTICATED');\r\nconst logout = createAction<void>('LOGGED_OUT');\r\nconst reducer = createReducer(INITIAL_STATE, builder =>\r\n  builder\r\n    .addCase(authenticate, (state, action) => {\r\n      const accessTokenJwtPayload = jwt.decode(action.payload.accessToken) as JwtPayload;\r\n      const refreshTokenJwtPayload = jwt.decode(action.payload.refreshToken) as JwtPayload;\r\n      const isAdmin = !!accessTokenJwtPayload.resource_access?.['realm-management']?.roles?.some(\r\n        role => role === 'manage-users',\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        accessToken: {\r\n          val: action.payload.accessToken,\r\n          expiry: accessTokenJwtPayload.exp,\r\n        },\r\n        refreshToken: {\r\n          val: action.payload.refreshToken,\r\n          expiry: refreshTokenJwtPayload.exp,\r\n        },\r\n        role: isAdmin ? UserRole.ADMIN : UserRole.ANNOTATOR,\r\n      };\r\n    })\r\n    .addCase(logout, () => {\r\n      return INITIAL_STATE;\r\n    }),\r\n);\r\n\r\nexport const actions = { authenticate, logout };\r\nexport default reducer;\r\n","import { httpClient } from '../http/http.client';\r\nimport { createLogger } from '../logger/logger';\r\nimport { store } from '../store/store';\r\nimport {\r\n  actions as annotationActions,\r\n  JudgementPairStatus,\r\n} from '../store/annotation/annotation.slice';\r\n\r\nconst logger = createLogger('judgements.service');\r\n\r\nexport const judgementsService = {\r\n  preloadJudgements: async () => {\r\n    logger.info(`executing preload judgements...`);\r\n\r\n    const response = await httpClient.preloadJudgements(store.getState().user!.accessToken.val);\r\n    store.dispatch(annotationActions.preloadJudgements(response));\r\n\r\n    logger.info(`preload judgements succeeded!`, { response });\r\n    return response;\r\n  },\r\n\r\n  submitCurrentJudgement: async () => {\r\n    logger.info(`executing submit current judgement...`);\r\n\r\n    const annotationState = store.getState().annotation;\r\n    const currentJudgementPair = annotationState.judgementPairs.find(\r\n      pair => pair.id === annotationState.currentJudgementPairId,\r\n    )!;\r\n    const relevancePositions: number[] = [];\r\n    for (const annotatedRange of currentJudgementPair.annotatedRanges) {\r\n      for (let i = annotatedRange.start; i <= annotatedRange.end; i++) {\r\n        relevancePositions.push(i);\r\n      }\r\n    }\r\n\r\n    const now = new Date().getTime();\r\n    const durationUsedToJudgeMs = now - annotationState.currentJudgementPairSelectedOnMs!;\r\n\r\n    store.dispatch(\r\n      annotationActions.setJudgementStatus({\r\n        id: currentJudgementPair.id,\r\n        status: JudgementPairStatus.SEND_PENDING,\r\n      }),\r\n    );\r\n\r\n    try {\r\n      await httpClient.submitJudgement(\r\n        store.getState().user!.accessToken.val,\r\n        currentJudgementPair.id,\r\n        {\r\n          relevanceLevel: currentJudgementPair.relevanceLevel!,\r\n          relevancePositions,\r\n          durationUsedToJudgeMs,\r\n        },\r\n      );\r\n    } catch (error) {\r\n      logger.error(`submit current judgement failed!`, { id: currentJudgementPair.id, error });\r\n      store.dispatch(\r\n        annotationActions.setJudgementStatus({\r\n          id: currentJudgementPair.id,\r\n          status: JudgementPairStatus.SEND_FAILED,\r\n        }),\r\n      );\r\n      throw error;\r\n    }\r\n\r\n    store.dispatch(\r\n      annotationActions.setJudgementStatus({\r\n        id: currentJudgementPair.id,\r\n        status: JudgementPairStatus.SEND_SUCCESS,\r\n      }),\r\n    );\r\n\r\n    logger.info(`submit current judgement succeeded!`);\r\n  },\r\n};\r\n","import { createLogger } from '../../logger/logger';\r\nimport { RootStore } from '../store';\r\nimport { judgementsService } from '../../judgements/judgements.service';\r\nimport { actions as annotationActions, JudgementPairStatus } from '../annotation/annotation.slice';\r\nimport { UserRole } from '../user/user.slice';\r\n\r\nconst logger = createLogger('annotation.subscriptions');\r\n\r\nexport const setupSubscriptions = (store: RootStore) => {\r\n  // if no judgement pairs got loaded from the server yet, preload pairs\r\n  store.subscribe(() => {\r\n    const annotationState = store.getState().annotation;\r\n\r\n    const user = store.getState().user;\r\n    if (!user || !user.accessToken) {\r\n      logger.info(\r\n        'no judgement pairs got loaded from the server yet, but there is no access token available --> skip preload',\r\n      );\r\n      return;\r\n    }\r\n    if (user.role !== UserRole.ANNOTATOR) {\r\n      logger.info(\r\n        'no judgement pairs got loaded from the server yet, but user role is not annotator --> skip preload',\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (annotationState.remainingToFinish === undefined) {\r\n      logger.info('no judgement pairs got loaded from the server yet --> execute preload...');\r\n      judgementsService.preloadJudgements();\r\n    }\r\n  });\r\n\r\n  // if count of (local) judgement pairs does not fulfill threshold and there are remaining\r\n  // judgements to preload on the server --> execute preload.\r\n  // we count judgement pairs which are not judged yet or not sent to the server yet\r\n  const loadNextPairsSubscription: MemoizedSubscription = {\r\n    memoizeOnValue: subscribedStore => subscribedStore.getState().annotation.judgementPairs,\r\n    listener: subscribedStore => {\r\n      const annotationState = subscribedStore.getState().annotation;\r\n      if (\r\n        annotationState.remainingToFinish !== undefined &&\r\n        annotationState.judgementPairs.filter(\r\n          pair =>\r\n            pair.status === JudgementPairStatus.TO_JUDGE ||\r\n            pair.status === JudgementPairStatus.SEND_PENDING,\r\n        ).length <= 1 &&\r\n        annotationState.remainingToFinish > annotationState.judgementPairs.length\r\n      ) {\r\n        logger.info(\r\n          'count of preloaded judgement pairs does not fulfill threshold and ' +\r\n            'there are remaining judgements to preload on the server --> execute preload...',\r\n        );\r\n        judgementsService.preloadJudgements();\r\n      }\r\n    },\r\n  };\r\n  addMemoizedSubscription(store, loadNextPairsSubscription);\r\n\r\n  // set new currently selected judgement pair if list of judgement pairs changes\r\n  const setNextSelectedPairSubscription: MemoizedSubscription = {\r\n    memoizeOnValue: subscribedStore => subscribedStore.getState().annotation.judgementPairs,\r\n    listener: subscribedStore => {\r\n      const judgePairsOfStore = subscribedStore.getState().annotation.judgementPairs;\r\n\r\n      // select first pair which neither gets currently sent to the server nor was already sent to the server\r\n      const nextPair = judgePairsOfStore.find(pair => pair.status === JudgementPairStatus.TO_JUDGE);\r\n      subscribedStore.dispatch(annotationActions.selectJudgementPair(nextPair));\r\n    },\r\n  };\r\n  addMemoizedSubscription(store, setNextSelectedPairSubscription);\r\n};\r\n\r\ntype MemoizedSubscription = {\r\n  memoizeOnValue: (subscribedStore: RootStore) => any;\r\n  listener: (subscribedStore: RootStore) => void;\r\n};\r\n\r\nfunction addMemoizedSubscription(store: RootStore, subscription: MemoizedSubscription) {\r\n  let memoizedValue = subscription.memoizeOnValue(store);\r\n  store.subscribe(() => {\r\n    const newValueOfStore = subscription.memoizeOnValue(store);\r\n    if (memoizedValue !== newValueOfStore) {\r\n      memoizedValue = newValueOfStore;\r\n      subscription.listener(store);\r\n    }\r\n  });\r\n}\r\n","import { createLogger } from '../../logger/logger';\n\nconst logger = createLogger('store-logger-middleware');\n\nconst loggerMiddleware = (store: any) => (next: any) => (action: any) => {\n  logger.group(action.type);\n  logger.info('dispatching', action);\n  const result = next(action);\n  logger.info('next state', store.getState());\n  logger.groupEnd();\n  return result;\n};\n\nexport default loggerMiddleware;\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport { setupSubscriptions as setupUserSubscriptions } from './user/user.subscriptions';\r\nimport { setupSubscriptions as setupAnnotationSubscriptions } from './annotation/annotation.subscriptions';\r\nimport loggerMiddleware from './middleware/logger';\r\n\r\nimport userReducer from './user/user.slice';\r\nimport annotationReducer from './annotation/annotation.slice';\r\n\r\nconst rootReducer = combineReducers({\r\n  user: userReducer,\r\n  annotation: annotationReducer,\r\n});\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: [loggerMiddleware, ...getDefaultMiddleware()],\r\n});\r\n\r\nconst subscriptions = [setupUserSubscriptions, setupAnnotationSubscriptions];\r\nsubscriptions.forEach(subscription => subscription(store));\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootStore = typeof store;\r\n","import moment from 'moment';\r\n\r\nimport { httpClient } from '../http/http.client';\r\nimport { store } from '../store/store';\r\nimport { createLogger } from '../logger/logger';\r\nimport { actions as userActions } from '../store/user/user.slice';\r\n\r\nconst logger = createLogger('auth.service');\r\n\r\nexport const authService = {\r\n  login: async (username: string, password: string) => {\r\n    logger.info(`executing login...`, { username });\r\n\r\n    const loginResponse = await httpClient.login({ username, password });\r\n\r\n    logger.info(`login succeeded!`, { loginResponse });\r\n    store.dispatch(userActions.authenticate(loginResponse));\r\n  },\r\n\r\n  refresh: async (refreshToken: string) => {\r\n    logger.info(`executing refresh...`, { refreshToken });\r\n\r\n    let refreshResponse;\r\n    try {\r\n      refreshResponse = await httpClient.refresh({ refreshToken });\r\n    } catch (err) {\r\n      logger.error(`refresh failed!`, err);\r\n      store.dispatch(userActions.logout());\r\n      return;\r\n    }\r\n\r\n    logger.info(`refresh succeeded!`, { refreshResponse });\r\n    store.dispatch(userActions.authenticate(refreshResponse));\r\n  },\r\n\r\n  accessTokenExpired: (): boolean => {\r\n    const user = store.getState().user;\r\n\r\n    if (!user) {\r\n      return true;\r\n    }\r\n    const accessTokenExpiry = moment.unix(user.accessToken.expiry);\r\n\r\n    return accessTokenExpiry.isBefore(moment.now());\r\n  },\r\n};\r\n","import React, { useState, useRef } from 'react';\r\n\r\nimport styles from './FloatingTextInput.module.css';\r\n\r\ntype FloatingLabelInputProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\nconst FloatingLabelInput: React.FC<FloatingLabelInputProps> = ({ children, ...props }) => (\r\n  <div {...props} className={`${props.className} ${styles.floatingLabelInput}`}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\ntype FloatingLabelInputContainerProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\nconst FloatingLabelInputContainer: React.FC<FloatingLabelInputContainerProps> = ({\r\n  children,\r\n  ...props\r\n}) => (\r\n  <div {...props} className={`${props.className} ${styles.floatingLabelInputContainer}`}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\ntype FloatingLabelProps = { active: boolean } & React.DetailedHTMLProps<\r\n  React.LabelHTMLAttributes<HTMLLabelElement>,\r\n  HTMLLabelElement\r\n>;\r\n\r\nconst FloatingLabel: React.FC<FloatingLabelProps> = ({ active, children, ...props }) => (\r\n  <label\r\n    {...props}\r\n    className={`${props.className} ${!!active && styles.floatingLabelActive} ${\r\n      styles.floatingLabel\r\n    }`}\r\n  >\r\n    {children}\r\n  </label>\r\n);\r\n\r\ntype FloatingInputProps = {\r\n  active: boolean;\r\n  inputRef: React.RefObject<HTMLInputElement>;\r\n} & React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\nconst FloatingInput: React.FC<FloatingInputProps> = ({ children, active, inputRef, ...props }) => (\r\n  <input\r\n    {...props}\r\n    ref={inputRef}\r\n    onBlur={props.onBlur}\r\n    className={`${props.className} ${!!active && styles.floatingInputActive} ${\r\n      styles.floatingInput\r\n    }`}\r\n  >\r\n    {children}\r\n  </input>\r\n);\r\n\r\nconst FloatingTextInput: React.FC<any> = ({ id, label, type, className, value, ...otherProps }) => {\r\n  const [active, setActive] = useState(!!value && value.length > 0);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  function onFocus(event: any) {\r\n    setActive(true);\r\n    if (otherProps.onFocus) {\r\n      otherProps.onFocus(event);\r\n    }\r\n  }\r\n  function onBlur(event: any) {\r\n    if (!event.target.value || event.target.value.length === 0) {\r\n      setActive(false);\r\n    }\r\n    if (otherProps.onBlur) {\r\n      otherProps.onBlur(event);\r\n    }\r\n  }\r\n\r\n  function onContainerClick() {\r\n    inputRef.current!.focus();\r\n  }\r\n\r\n  return (\r\n    <FloatingLabelInput>\r\n      <FloatingLabelInputContainer onClick={onContainerClick} className={className}>\r\n        <FloatingLabel htmlFor={id} active={active}>\r\n          {label}\r\n        </FloatingLabel>\r\n        <FloatingInput\r\n          {...otherProps}\r\n          active={active}\r\n          id={id}\r\n          onBlur={onBlur}\r\n          onFocus={onFocus}\r\n          inputRef={inputRef}\r\n          type={type}\r\n        />\r\n      </FloatingLabelInputContainer>\r\n    </FloatingLabelInput>\r\n  );\r\n};\r\n\r\nexport default FloatingTextInput;\r\n","import React from 'react';\r\n\r\nimport styles from './LoadingIndicator.module.css';\r\n\r\nconst LoadingIndicator: React.FC = () => (\r\n  <div className={styles.ldsEllipsis}>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n  </div>\r\n);\r\n\r\nexport default LoadingIndicator;\r\n","import React, { useState } from 'react';\n\nimport styles from './Button.module.css';\n\nconst Button: React.FC<{\n  componentRef?: React.RefObject<HTMLButtonElement>;\n  buttonStyle?: 'bold' | 'normal';\n} & React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>> = ({\n  componentRef,\n  children,\n  buttonStyle = 'normal',\n  ...props\n}) => {\n  const [animate, setAnimate] = useState(false);\n\n  function animateStart() {\n    setAnimate(true);\n  }\n\n  function animateEnd() {\n    setAnimate(false);\n  }\n\n  function onClick(e: React.MouseEvent<HTMLButtonElement>) {\n    if (typeof props.onClick === 'function') {\n      props.onClick(e);\n    }\n    animateStart();\n  }\n\n  function onTransitionEnd(e: React.TransitionEvent<HTMLButtonElement>) {\n    if (typeof props.onTransitionEnd === 'function') {\n      props.onTransitionEnd(e);\n    }\n    animateEnd();\n  }\n\n  return (\n    <button\n      {...props}\n      onClick={onClick}\n      onTransitionEnd={onTransitionEnd}\n      ref={componentRef}\n      className={`${props.className} ${styles.button} ${animate && styles.animate} ${\n        buttonStyle === 'normal' ? styles.styleNormal : styles.styleBold\n      }`}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\r\nimport { Formik, Form, useField, FieldHookConfig } from 'formik';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport styles from './Login.module.css';\r\nimport { authService } from '../auth/auth.service';\r\nimport { RootState } from '../store/store';\r\nimport FloatingTextInput from './elements/FloatingTextInput';\r\nimport LoadingIndicator from './elements/LoadingIndicator';\r\nimport Button from './elements/Button';\r\n\r\nconst TextInput: React.FC<{ label: string } & FieldHookConfig<any> &\r\n  React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>> = ({\r\n  label,\r\n  ...props\r\n}) => {\r\n  const [field, meta] = useField(props);\r\n\r\n  const showError = meta.touched && meta.error;\r\n\r\n  return (\r\n    <div>\r\n      <FloatingTextInput\r\n        className={`${styles.inputField} ${showError && styles.inputFieldError}`}\r\n        htmlFor={props.id || props.name}\r\n        label={label}\r\n        {...field}\r\n        {...props}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Login = () => {\r\n  const user = useSelector((state: RootState) => state.user);\r\n  const loggedIn = !!user;\r\n\r\n  if (loggedIn) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.inputArea}>\r\n        <span>Login</span>\r\n        <Formik\r\n          initialValues={{ username: '', password: '', loginError: '' }}\r\n          validate={values => {\r\n            const errors: any = {};\r\n            if (!values.username) {\r\n              errors.username = 'Required';\r\n            }\r\n            if (!values.password) {\r\n              errors.password = 'Required';\r\n            }\r\n            return errors;\r\n          }}\r\n          onSubmit={async (values, { setSubmitting, setErrors }) => {\r\n            try {\r\n              await authService.login(values.username, values.password);\r\n              // omit setSubmitting here because if login was successful, it will redirect and thus unmount the component\r\n            } catch (e) {\r\n              if (typeof e.getStatus === 'function' && e.getStatus() === 401) {\r\n                setErrors({ loginError: `Credentials invalid.` });\r\n              } else if (\r\n                (typeof e.message === 'string' && /Network Error/i.test(e.message)) ||\r\n                e.code === 'ECONNABORTED'\r\n              ) {\r\n                setErrors({ loginError: `Network error. Please make sure to be online.` });\r\n              } else {\r\n                setErrors({ loginError: `Unexpected error occured during login.` });\r\n              }\r\n              setSubmitting(false);\r\n            }\r\n          }}\r\n        >\r\n          {({ isSubmitting, errors }) => (\r\n            <Form>\r\n              <TextInput type=\"text\" label=\"Username\" name=\"username\" autoComplete=\"off\" />\r\n              <TextInput type=\"text\" label=\"Password\" name=\"password\" autoComplete=\"off\" />\r\n              {errors.loginError && errors.loginError.length > 0 && (\r\n                <ul className={styles.errorList}>\r\n                  <li>\r\n                    <span>{errors.loginError}</span>\r\n                  </li>\r\n                </ul>\r\n              )}\r\n              <Button buttonStyle=\"bold\" type=\"submit\" disabled={isSubmitting}>\r\n                {!isSubmitting ? 'Submit' : <LoadingIndicator />}\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { httpClient } from '../http/http.client';\r\nimport { createLogger } from '../logger/logger';\r\nimport { store } from '../store/store';\r\n\r\nconst logger = createLogger('admin.service');\r\n\r\nexport const adminService = {\r\n  exportJudgements: async () => {\r\n    logger.info(`executing export of judgements...`);\r\n\r\n    const response = await httpClient.exportJudgements(store.getState().user!.accessToken.val);\r\n    saveTsv('judgements.tsv', response);\r\n\r\n    logger.info(`export of judgements succeeded!`, { response });\r\n  },\r\n};\r\n\r\nfunction saveTsv(filename: string, data: string) {\r\n  const blob = new Blob([data], { type: 'text/tsv' });\r\n  const elem = window.document.createElement('a');\r\n  elem.href = window.URL.createObjectURL(blob);\r\n  elem.download = filename;\r\n  document.body.appendChild(elem);\r\n  elem.click();\r\n  document.body.removeChild(elem);\r\n}\r\n","import React from 'react';\r\n\r\nimport { adminService } from '../../admin/admin.service';\r\n\r\nconst Admin: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <button onClick={adminService.exportJudgements}>Export Judgements</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n","// tslint:disable-next-line:no-empty\r\nexport const noop = () => {};\r\n","import React, { useRef, useLayoutEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Manager, Reference, Popper } from 'react-popper';\r\n\r\nimport styles from './Annotation.module.css';\r\nimport { RootState, AppDispatch } from '../../store/store';\r\nimport {\r\n  actions as annotationActions,\r\n  JudgementPairStatus,\r\n} from '../../store/annotation/annotation.slice';\r\nimport { RelevanceLevel, RateLevels } from '../../typings/enums';\r\nimport { judgementsService } from '../../judgements/judgements.service';\r\nimport { noop } from '../../util/functions';\r\nimport Button from '../elements/Button';\r\n\r\nconst Annotation: React.FC = () => {\r\n  const annotationState = useSelector((state: RootState) => state.annotation);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const [tooltipAnnotatePartIndex, setTooltipAnnotatePartIndex] = useState<number | undefined>(\r\n    undefined,\r\n  );\r\n\r\n  const button1Ref = useRef<HTMLButtonElement>(null);\r\n  const button2Ref = useRef<HTMLButtonElement>(null);\r\n  const button3Ref = useRef<HTMLButtonElement>(null);\r\n  const button4Ref = useRef<HTMLButtonElement>(null);\r\n  const button5Ref = useRef<HTMLButtonElement>(null);\r\n\r\n  const digitRefMap = {\r\n    Digit1: button1Ref,\r\n    Digit2: button2Ref,\r\n    Digit3: button3Ref,\r\n    Digit4: button4Ref,\r\n    Digit5: button5Ref,\r\n  } as const;\r\n\r\n  const rateButtonRefMap = {\r\n    [RelevanceLevel.MISLEADING_ANSWER]: button1Ref,\r\n    [RelevanceLevel.NOT_RELEVANT]: button2Ref,\r\n    [RelevanceLevel.TOPIC_RELEVANT_DOES_NOT_ANSWER]: button3Ref,\r\n    [RelevanceLevel.GOOD_ANSWER]: button4Ref,\r\n    [RelevanceLevel.PERFECT_ANSWER]: button5Ref,\r\n  } as const;\r\n\r\n  useLayoutEffect(() => {\r\n    const keyUpHandler = (e: KeyboardEvent) => {\r\n      const key = e.code;\r\n      if (\r\n        key === 'Digit1' ||\r\n        key === 'Digit2' ||\r\n        key === 'Digit3' ||\r\n        key === 'Digit4' ||\r\n        key === 'Digit5'\r\n      ) {\r\n        digitRefMap[key].current!.click();\r\n      }\r\n    };\r\n    document.addEventListener('keyup', keyUpHandler, { passive: true });\r\n    return () => document.removeEventListener('keyup', keyUpHandler);\r\n  });\r\n\r\n  const pairsSuccessfullySent = annotationState.judgementPairs.filter(\r\n    pair => pair.status === JudgementPairStatus.SEND_SUCCESS,\r\n  );\r\n  const remainingToFinish =\r\n    annotationState.remainingToFinish === undefined\r\n      ? undefined\r\n      : annotationState.remainingToFinish - pairsSuccessfullySent.length;\r\n  const alreadyFinished =\r\n    annotationState.alreadyFinished === undefined\r\n      ? undefined\r\n      : annotationState.alreadyFinished + pairsSuccessfullySent.length;\r\n\r\n  if (remainingToFinish !== undefined && remainingToFinish <= 0) {\r\n    return <div>Finished!</div>;\r\n  }\r\n\r\n  const currentJudgementPair = annotationState.judgementPairs.find(\r\n    pair => pair.id === annotationState.currentJudgementPairId,\r\n  );\r\n  if (!currentJudgementPair) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const createRatingFn = (relevanceLevel: RelevanceLevel) => () => {\r\n    dispatch(annotationActions.rateJudgementPair({ relevanceLevel }));\r\n  };\r\n\r\n  const createAnnotatePartFn = (annotationPartIndex: number) => () => {\r\n    dispatch(annotationActions.selectRangeStartEnd({ annotationPartIndex }));\r\n  };\r\n\r\n  const createShowTooltipFn = (annotationPartIndex: number) => () =>\r\n    setTooltipAnnotatePartIndex(annotationPartIndex);\r\n\r\n  const submitAnnotation = () => {\r\n    judgementsService.submitCurrentJudgement();\r\n  };\r\n\r\n  const currentRateLevel = RateLevels.find(\r\n    rateLevel => rateLevel.relevanceLevel === currentJudgementPair.relevanceLevel,\r\n  );\r\n  const rateLevelAllowsAnnotation = currentRateLevel?.annotationRequired;\r\n  const hasToAnnotate =\r\n    !currentRateLevel ||\r\n    (currentRateLevel.annotationRequired &&\r\n      (currentJudgementPair.annotatedRanges.length === 0 ||\r\n        currentJudgementPair.currentAnnotationStart !== undefined));\r\n\r\n  let progressBarWidth: number | undefined;\r\n  if (remainingToFinish !== undefined && alreadyFinished !== undefined) {\r\n    const vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\r\n    const annotationTarget = remainingToFinish + alreadyFinished;\r\n    const finishedFraction = alreadyFinished / annotationTarget;\r\n    progressBarWidth = vw * finishedFraction;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {progressBarWidth !== undefined && (\r\n        <div style={{ width: progressBarWidth }} className={styles.progressBar} />\r\n      )}\r\n      <div\r\n        className={styles.container}\r\n        onClickCapture={() => setTooltipAnnotatePartIndex(undefined)}\r\n      >\r\n        <div className={styles.queryText}>{currentJudgementPair.queryText}</div>\r\n        <div key={currentJudgementPair.id} className={styles.annotationArea}>\r\n          {currentJudgementPair.docAnnotationParts.map((annotationPart, i) => {\r\n            // replace blank by fixed-width blank character (otherwise, styles like border don't apply)\r\n            const textToShow = annotationPart.replace(' ', '\\u00a0');\r\n\r\n            // set css class if part is start of the current selected range\r\n            const currentRangeStartStyle =\r\n              currentJudgementPair.currentAnnotationStart === i ? styles.rangeStart : '';\r\n\r\n            // determine if part is in one of the selected ranges\r\n            const isInSelectedRange = currentJudgementPair.annotatedRanges.some(\r\n              range => range.start <= i && range.end >= i,\r\n            );\r\n\r\n            const canAnnotatePart = rateLevelAllowsAnnotation && !isInSelectedRange;\r\n\r\n            // display the span as selectable if annotation is possible\r\n            const annotationGridStyle = rateLevelAllowsAnnotation ? styles.gridStyle : '';\r\n\r\n            const annotatePartSpan = (ref?: any) => (\r\n              <span\r\n                ref={ref}\r\n                key={i}\r\n                onClick={\r\n                  canAnnotatePart\r\n                    ? createAnnotatePartFn(i)\r\n                    : isInSelectedRange\r\n                    ? createShowTooltipFn(i)\r\n                    : noop\r\n                }\r\n                className={`${styles.annotatePart} ${currentRangeStartStyle} ${\r\n                  !!isInSelectedRange ? styles.isInRange : ''\r\n                } ${annotationGridStyle}`}\r\n              >\r\n                {textToShow}\r\n              </span>\r\n            );\r\n\r\n            return tooltipAnnotatePartIndex !== i ? (\r\n              annotatePartSpan()\r\n            ) : (\r\n              <Manager>\r\n                <Reference>{({ ref }) => annotatePartSpan(ref)}</Reference>\r\n                <Popper placement=\"top\">\r\n                  {({ ref, style, placement }) => (\r\n                    <div ref={ref} style={style} data-placement={placement}>\r\n                      <Button\r\n                        className={styles.annotatePartTooltipButton}\r\n                        onClick={e => {\r\n                          dispatch(annotationActions.deleteRange({ annotationPartIndex: i }));\r\n                          setTooltipAnnotatePartIndex(undefined);\r\n                        }}\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"14\"\r\n                          height=\"18\"\r\n                          viewBox=\"5 3 14 18\"\r\n                          fill=\"white\"\r\n                        >\r\n                          <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\" />\r\n                        </svg>\r\n                        Remove\r\n                      </Button>\r\n                    </div>\r\n                  )}\r\n                </Popper>\r\n              </Manager>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className={styles.buttonContainer}>\r\n          {RateLevels.map(rateButton => (\r\n            <div key={rateButton.relevanceLevel}>\r\n              <Button\r\n                style={{\r\n                  background: rateButton.buttonColor,\r\n                }}\r\n                className={styles.rateButton}\r\n                onClick={createRatingFn(rateButton.relevanceLevel)}\r\n                componentRef={rateButtonRefMap[rateButton.relevanceLevel]}\r\n              >\r\n                {rateButton.text}\r\n              </Button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div>\r\n          <Button buttonStyle=\"bold\" disabled={hasToAnnotate} onClick={submitAnnotation}>\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Annotation;\r\n","import React from 'react';\r\nimport { RouteProps, Route, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { RootState } from '../store/store';\r\nimport { UserRole } from '../store/user/user.slice';\r\n\r\ntype PrivateRouteProps = RouteProps & {\r\n  requiredRole: UserRole;\r\n};\r\n\r\nconst PrivateRoute: React.FC<PrivateRouteProps> = ({ requiredRole, ...rest }) => {\r\n  const user = useSelector((state: RootState) => state.user);\r\n\r\n  if (!!user && user?.role === requiredRole) {\r\n    return <Route {...rest} />;\r\n  } else {\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport styles from './App.module.css';\r\nimport Login from './Login';\r\nimport Admin from './admin/Admin';\r\nimport Annotation from './annotation/Annotation';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport { RootState } from '../store/store';\r\nimport { UserRole } from '../store/user/user.slice';\r\nimport { assertUnreachable } from '../util/types.util';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className={styles.app}>\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <RouteToPage />\r\n          </Route>\r\n          <Route path=\"/login\">\r\n            <Login />\r\n          </Route>\r\n          <PrivateRoute path=\"/admin\" requiredRole={UserRole.ADMIN}>\r\n            <Admin />\r\n          </PrivateRoute>\r\n          <PrivateRoute path=\"/annotator\" requiredRole={UserRole.ANNOTATOR}>\r\n            <Annotation />\r\n          </PrivateRoute>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst RouteToPage: React.FC = () => {\r\n  const user = useSelector((state: RootState) => state.user);\r\n\r\n  if (!user) {\r\n    return <Redirect to=\"/login\" />;\r\n  } else if (user.role === UserRole.ADMIN) {\r\n    return <Redirect to=\"/admin\" />;\r\n  } else if (user.role === UserRole.ANNOTATOR) {\r\n    return <Redirect to=\"/annotator\" />;\r\n  } else {\r\n    assertUnreachable(user.role);\r\n  }\r\n};\r\n\r\nexport default App;\r\n","export function assertUnreachable(x: never): never {\n  throw new Error('Should not get here');\n}\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { browserStorage } from '../browser-storage/browser-storage';\r\nimport { store } from '../store/store';\r\nimport { actions as userActions } from '../store/user/user.slice';\r\nimport { createLogger } from '../logger/logger';\r\n\r\nconst logger = createLogger('load-stored-user');\r\n\r\nexport function loadStoredUser() {\r\n  logger.info('load user from browser storage');\r\n  const storedUser = browserStorage.getUser();\r\n\r\n  if (storedUser) {\r\n    logger.info('stored user found. dispatching authenticate...', { storedUser });\r\n    store.dispatch(userActions.authenticate(storedUser));\r\n  } else {\r\n    logger.info('no stored user found');\r\n  }\r\n}\r\n","import { loadStoredUser } from './load-stored-user';\nimport { createLogger } from '../logger/logger';\n\nconst bootScripts = [loadStoredUser];\n\nconst logger = createLogger('boot');\n\nexport const executeBootScripts = () => {\n  logger.info('executing boot scripts...');\n\n  bootScripts.forEach(bootScript => bootScript());\n};\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.css';\r\nimport App from './ui/App';\r\nimport { store } from './store/store';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { executeBootScripts } from './boot/boot';\r\n\r\nexecuteBootScripts();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"floatingLabelInput\":\"FloatingTextInput_floatingLabelInput__1efr1\",\"floatingLabelInputContainer\":\"FloatingTextInput_floatingLabelInputContainer__2LY7N\",\"floatingLabel\":\"FloatingTextInput_floatingLabel__p_hYS\",\"floatingLabelActive\":\"FloatingTextInput_floatingLabelActive__3cGGa\",\"floatingInput\":\"FloatingTextInput_floatingInput__k7JFP\",\"floatingInputActive\":\"FloatingTextInput_floatingInputActive__1t44z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__-Ut2j\",\"inputArea\":\"Login_inputArea__2HA21\",\"errorList\":\"Login_errorList__1e1pq\",\"inputField\":\"Login_inputField__2z-fg\",\"inputFieldError\":\"Login_inputFieldError__-xPtR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__aUVEj\",\"styleBold\":\"Button_styleBold__OSRgP\",\"styleNormal\":\"Button_styleNormal__21gUz\",\"animate\":\"Button_animate__P4pSL\"};"],"sourceRoot":""}